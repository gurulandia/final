#!/usr/bin/env python3
"""
Script para buscar promo√ß√µes do site Anota.ai e atualizar o site da Mega Beer
Executa diariamente √†s 11:00 via cron job
"""

import requests
from bs4 import BeautifulSoup
import json
import re
from datetime import datetime
import os
import time
from selenium import webdriver
from selenium.webdriver.chrome.service import Service
from webdriver_manager.chrome import ChromeDriverManager
from selenium.webdriver.chrome.options import Options

def buscar_promocoes():
    """Busca as promo√ß√µes da se√ß√£o PROMO√á√ÉO DA SEMANA do site Anota.ai"""
    
    url = "https://pedido.anota.ai/loja/nosso-drink-2249630?f=ms"
    
    # Configurar o Selenium
    chrome_options = Options()
    chrome_options.add_argument("--headless")
    chrome_options.add_argument("--no-sandbox")
    chrome_options.add_argument("--disable-dev-shm-usage")
    
    driver = None  # Inicializar driver como None
    try:
        # Usar webdriver-manager para gerenciar o driver
        service = Service(ChromeDriverManager().install())
        driver = webdriver.Chrome(service=service, options=chrome_options)
        
        # Fazer requisi√ß√£o para o site
        driver.get(url)
        
        # Esperar o JavaScript carregar - 10 segundos √© um come√ßo
        print("Aguardando o carregamento da p√°gina (10 segundos)...")
        time.sleep(10)
        
        # Pegar o HTML renderizado
        html_content = driver.page_source

        # Parse do HTML
        soup = BeautifulSoup(html_content, 'html.parser')
        
        promocoes = []
        
        # Buscar se√ß√£o de promo√ß√µes
        # Procurar por elementos que contenham "Promo√ß√£o:" no texto
        promocao_elements = soup.find_all(string=re.compile(r'üî•.*Promo√ß√£o:.*üî•'))
        
        for element in promocao_elements[:6]:  # Limitar a 6 promo√ß√µes
            # Extrair informa√ß√µes da promo√ß√£o
            texto_promocao = element.strip()
            
            # Buscar o pre√ßo associado
            parent = element.parent
            preco_element = None
            
            # Procurar por pre√ßo nos elementos pr√≥ximos
            for sibling in parent.find_next_siblings():
                preco_match = re.search(r'R\$\s*(\d+,\d+)', sibling.get_text())
                if preco_match:
                    preco_element = preco_match.group(0)
                    break
            
            if not preco_element:
                # Tentar buscar no pr√≥prio elemento pai
                preco_match = re.search(r'R\$\s*(\d+,\d+)', parent.get_text())
                if preco_match:
                    preco_element = preco_match.group(0)
            
            # Extrair nome do produto (remover emojis e "Promo√ß√£o:")
            nome_produto = re.sub(r'üî•.*Promo√ß√£o:\s*', '', texto_promocao)
            nome_produto = re.sub(r'\s*üî•.*', '', nome_produto)
            nome_produto = nome_produto.strip()
            
            if nome_produto and preco_element:
                promocoes.append({
                    'nome': nome_produto,
                    'preco': preco_element,
                    'texto_completo': texto_promocao
                })
        
        return promocoes
        
    except Exception as e:
        print(f"Erro ao buscar promo√ß√µes: {e}")
        return []
    finally:
        if driver:
            driver.quit()

def gerar_json_promocoes(promocoes):
    """Gera uma string JSON com as promo√ß√µes."""
    if not promocoes:
        # Retorna um array JSON vazio se n√£o houver promo√ß√µes
        return json.dumps([], indent=4)
    
    # Converte a lista de promo√ß√µes para JSON
    return json.dumps(promocoes, ensure_ascii=False, indent=4)

def salvar_promocoes(promocoes):
    """Salva as promo√ß√µes em arquivo JSON."""
    
    json_content = gerar_json_promocoes(promocoes)
    
    # Salvar no diret√≥rio public do site com o nome promocoes.json
    json_file_path = os.path.join(os.path.dirname(__file__), 'public', 'promocoes.json')
    
    try:
        with open(json_file_path, 'w', encoding='utf-8') as f:
            f.write(json_content)
        
        print(f"Promo√ß√µes salvas em: {json_file_path}")
        return True
        
    except Exception as e:
        print(f"Erro ao salvar promo√ß√µes: {e}")
        return False

def main():
    """Fun√ß√£o principal"""
    print(f"[{datetime.now()}] Iniciando busca de promo√ß√µes...")
    
    # Buscar promo√ß√µes
    promocoes = buscar_promocoes()
    
    if promocoes:
        print(f"Encontradas {len(promocoes)} promo√ß√µes:")
        for i, promo in enumerate(promocoes, 1):
            print(f"  {i}. {promo['nome']} - {promo['preco']}")
        
        # Salvar promo√ß√µes
        if salvar_promocoes(promocoes):
            print("Promocoes atualizadas com sucesso!")
        else:
            print("Erro ao salvar promocoes")
    else:
        print("Nenhuma promocao encontrada")
    
    print(f"[{datetime.now()}] Processo conclu√≠do")

if __name__ == "__main__":
    main()
